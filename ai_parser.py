import os
import google.generativeai as genai
import json
from datetime import datetime, timedelta

genai.configure(api_key=os.environ.get("GEMINI_API_KEY"))
model = genai.GenerativeModel(model_name="gemini-1.5-flash")

def get_ai_response(message_text):
    prompt = f"""
    Voc√™ √© um assistente financeiro. Sua tarefa √© analisar a mensagem do usu√°rio e retornar um JSON estruturado.
    A inten√ß√£o do usu√°rio pode ser 'register_transaction' ou 'query_report'.

    1. Se for 'register_transaction', extraia: 'description', 'amount', 'type', 'payment_method'.
       - **Regra Crucial:** Palavras como 'recebi', 'ganhei', 'sal√°rio', 'dep√≥sito', 'entrada' indicam o type 'income'. Palavras como 'gastei', 'paguei', 'compra', 'sa√≠da', 'padaria', 'ifood', 'mercado' indicam 'expense'.

    2. Se for 'query_report', extraia: 'description' (o que foi gasto, ou null se for geral) e um 'time_period'.
       - Mapeie 'hoje' para 'today', 'ontem' para 'yesterday', 'essa semana' para 'this_week', 'semana passada' para 'last_week', 'esse m√™s' para 'this_month', 'm√™s passado' para 'last_month'.

    Responda APENAS com o JSON.

    Exemplos:
    - Mensagem: "recebi 800 reais do freela"
    - JSON: {{"intent": "register_transaction", "entities": {{"description": "freela", "amount": 800.00, "type": "income", "payment_method": null}}}}
    - Mensagem: "padaria 15 reais"
    - JSON: {{"intent": "register_transaction", "entities": {{"description": "padaria", "amount": 15.00, "type": "expense", "payment_method": null}}}}
    - Mensagem: "quanto gastei essa semana?"
    - JSON: {{"intent": "query_report", "entities": {{"description": null, "time_period": "this_week"}}}}
    - Mensagem: "gastos com mercado este m√™s"
    - JSON: {{"intent": "query_report", "entities": {{"description": "mercado", "time_period": "this_month"}}}}

    Mensagem do usu√°rio: "{message_text}"
    JSON:
    """
    try:
        response = model.generate_content(prompt)
        cleaned_response = response.text.strip().replace("`", "").replace("json", "")
        return json.loads(cleaned_response)
    except Exception as e:
        print(f"Erro Cr√≠tico na IA: {e}")
        return None

# --- NOVA FUN√á√ÉO ---
def get_financial_advice():
    """Usa a IA para gerar um conselho financeiro original."""
    prompt = """
    Voc√™ √© um coach financeiro. Crie um conselho financeiro original, curto e pr√°tico para o fim de semana. 
    Use uma linguagem amig√°vel e motivacional. Formate a resposta com um t√≠tulo em negrito e emojis.
    Exemplo:
    *üí° Planeje seus Gastos de Lazer*
    Antes de sair, defina um or√ßamento para o seu fim de semana. Saber quanto voc√™ pode gastar em restaurantes ou passeios ajuda a evitar surpresas na segunda-feira!
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Erro ao gerar conselho financeiro: {e}")
        return "Hoje a dica √©: sempre revise seu or√ßamento. Um bom planejamento √© a chave para a tranquilidade financeira!"
